{
    "AWSTemplateFormatVersion": "2010-09-09",
    "Description": "AWS CloudFormation Template for doccano.",
    "Resources": {
        "AppSG": {
            "Type": "AWS::EC2::SecurityGroup",
            "Properties": {
                "GroupDescription": "for the app nodes that allow ssh, http and docker ports",
                "SecurityGroupIngress": [
                    {
                        "IpProtocol": "tcp",
                        "FromPort": "80",
                        "ToPort": "80",
                        "CidrIp": "0.0.0.0/0"
                    },
                    {
                        "IpProtocol": "tcp",
                        "FromPort": "443",
                        "ToPort": "443",
                        "CidrIp": "0.0.0.0/0"
                    },
                    {
                        "IpProtocol": "tcp",
                        "FromPort": "22",
                        "ToPort": "22",
                        "CidrIp": "0.0.0.0/0"
                    }
                ]
            },
            "Metadata": {
                "AWS::CloudFormation::Designer": {
                    "id": "116a7f7b-14c5-489a-a3c8-faf276be7ab0"
                }
            }
        },
        "App": {
            "Type": "AWS::EC2::Instance",
            "Properties": {
                "InstanceType": {
                    "Ref": "InstanceType"
                },
                "ImageId": {
                    "Ref": "Ubuntu16Ami"
                },
                "KeyName": {
                    "Ref": "KeyName"
                },
                "SecurityGroups": [
                    {
                        "Ref": "AppSG"
                    }
                ],
                "UserData": {
                    "Fn::Base64": {
                        "Fn::Join": [
                            "",
                            [
                                "#!/usr/bin/env bash\n",
                                "sudo apt update\n",
                                "sudo apt install -y apt-transport-https ca-certificates curl software-properties-common\n",
                                "curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -\n",
                                "sudo add-apt-repository \"deb [arch=amd64] https://download.docker.com/linux/ubuntu bionic stable\"\n",
                                "sudo apt update\n",
                                "apt-cache policy docker-ce\n",
                                "sudo apt install -y docker-ce\n",
                                "sudo usermod -aG docker ${USER}\n",
                                "touch /env.list\n",
                                "sudo tee -a /env.list <<< ADMIN=",
                                {
                                    "Ref": "AdminUserName"
                                },
                                "\n",
                                "sudo tee -a /env.list <<< EMAIL=",
                                {
                                    "Ref": "AdminEmail"
                                },
                                "\n",
                                "sudo tee -a /env.list <<< PASSWORD=",
                                {
                                    "Ref": "AdminPassword"
                                },
                                "\n",
                                "sudo tee -a /env.list <<< DEBUG=",
                                {
                                    "Ref": "Debug"
                                },
                                "\n",
                                "sudo tee -a /env.list <<< SECRET_KEY=",
                                {
                                    "Ref": "SecretKey"
                                },
                                "\n",
                                "sudo tee -a /env.list <<< EMAIL_USE_TLS=",
                                {
                                    "Ref": "EMailUseTSL"
                                },
                                "\n",
                                "sudo tee -a /env.list <<< EMAIL_HOST=",
                                {
                                    "Ref": "EMailHost"
                                },
                                "\n",
                                "sudo tee -a /env.list <<< EMAIL_PORT=",
                                {
                                    "Ref": "EMailHostPort"
                                },
                                "\n",
                                "sudo tee -a /env.list <<< EMAIL_HOST_USER=",
                                {
                                    "Ref": "EMailHostUser"
                                },
                                "\n",
                                "sudo tee -a /env.list <<< EMAIL_HOST_PASSWORD=",
                                {
                                    "Ref": "EMailHostPassword"
                                },
                                "\n",
                                "sudo tee -a /env.list <<< WORKERS=",
                                {
                                    "Ref": "WorkersCount"
                                },
                                "\n",
                                "sudo tee -a /env.list <<< DEFAULT_FROM_EMAIL=",
                                {
                                    "Ref": "FromEmail"
                                },
                                "\n",
                                "sudo tee -a /env.list <<< DOCKER_IMAGE=",
                                {
                                    "Ref": "DockerImageName"
                                },
                                "\n",
                                "sudo tee -a /env.list <<< OAUTH_GITHUB_KEY=",
                                {
                                    "Ref": "OauthGithubKey"
                                },
                                "\n",
                                "sudo tee -a /env.list <<< OAUTH_GITHUB_SECRET=",
                                {
                                    "Ref": "OauthGithubSecret"
                                },
                                "\n",
                                "sudo tee -a /env.list <<< OAUTH_GITHUB_SECRET=0dc2a3dd72fb1bdbffa9a5b2ff95964c25877e19\n",
                               
                                "set -a\n",
                                "source /env.list\n",
                                "set +a\n",
                                "sudo docker pull ${DOCKER_IMAGE}\n",
                                "sudo docker run -d --name doccano --env-file /env.list -p 80:8000 ${DOCKER_IMAGE}\n",
                                "sleep 3 && sudo docker exec doccano tools/create-admin.sh ${ADMIN} ${EMAIL} ${PASSWORD}\n"
                            ]
                        ]
                    }
                }
            },
            "Metadata": {
                "AWS::CloudFormation::Designer": {
                    "id": "3547c02e-5393-4b26-a9af-6f00dc2cbcdb"
                }
            }
        },
        "DescribeImagesRole": {
            "Type": "AWS::IAM::Role",
            "Properties": {
                "AssumeRolePolicyDocument": {
                    "Version": "2012-10-17",
                    "Statement": [
                        {
                            "Action": "sts:AssumeRole",
                            "Effect": "Allow",
                            "Principal": {
                                "Service": "lambda.amazonaws.com"
                            }
                        }
                    ]
                },
                "ManagedPolicyArns": [
                    "arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
                ],
                "Policies": [
                    {
                        "PolicyName": "DescribeImages",
                        "PolicyDocument": {
                            "Version": "2012-10-17",
                            "Statement": [
                                {
                                    "Action": "ec2:DescribeImages",
                                    "Effect": "Allow",
                                    "Resource": "*"
                                }
                            ]
                        }
                    }
                ]
            },
            "Metadata": {
                "AWS::CloudFormation::Designer": {
                    "id": "234e003e-27a3-4a30-877f-3e725a18a303"
                }
            }
        },
        "GetLatestAMI": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
                "Runtime": "python3.6",
                "Handler": "index.handler",
                "Role": {
                    "Fn::Sub": "${DescribeImagesRole.Arn}"
                },
                "Timeout": 60,
                "Code": {
                    "ZipFile": "import boto3\nimport cfnresponse\nimport json\nimport traceback\n\ndef handler(event, context):\n  try:\n    response = boto3.client('ec2').describe_images(\n        Owners=[event['ResourceProperties']['Owner']],\n        Filters=[\n          {'Name': 'name', 'Values': [event['ResourceProperties']['Name']]},\n          {'Name': 'architecture', 'Values': [event['ResourceProperties']['Architecture']]},\n          {'Name': 'root-device-type', 'Values': ['ebs']},\n        ],\n    )\n\n    amis = sorted(response['Images'],\n                  key=lambda x: x['CreationDate'],\n                  reverse=True)\n    id = amis[0]['ImageId']\n\n    cfnresponse.send(event, context, cfnresponse.SUCCESS, {}, id)\n  except:\n    traceback.print_last()\n    cfnresponse.send(event, context, cfnresponse.FAIL, {}, \"ok\")\n"
                }
            },
            "Metadata": {
                "AWS::CloudFormation::Designer": {
                    "id": "a7cfe40d-0958-4f46-8eb5-0dbe381860e6"
                }
            }
        },
        "Ubuntu16Ami": {
            "Type": "Custom::FindAMI",
            "Properties": {
                "ServiceToken": {
                    "Fn::Sub": "${GetLatestAMI.Arn}"
                },
                "Owner": "099720109477",
                "Name": "ubuntu/images/hvm-ssd/ubuntu-xenial-16.04-amd64-server-20190913",
                "Architecture": "x86_64"
            },
            "Metadata": {
                "AWS::CloudFormation::Designer": {
                    "id": "549e5fd9-f847-4bf2-b779-e2678810d5ad"
                }
            },
            "DependsOn": [
                "GetLatestAMI"
            ]
        }
    },
    "Metadata": {
        "AWS::CloudFormation::Designer": {
            "116a7f7b-14c5-489a-a3c8-faf276be7ab0": {
                "size": {
                    "width": 60,
                    "height": 60
                },
                "position": {
                    "x": 60,
                    "y": 210
                },
                "z": 1,
                "embeds": []
            },
            "3547c02e-5393-4b26-a9af-6f00dc2cbcdb": {
                "size": {
                    "width": 60,
                    "height": 60
                },
                "position": {
                    "x": 180,
                    "y": 210
                },
                "z": 1,
                "embeds": [],
                "isassociatedwith": [
                    "116a7f7b-14c5-489a-a3c8-faf276be7ab0"
                ]
            },
            "549e5fd9-f847-4bf2-b779-e2678810d5ad": {
                "size": {
                    "width": 60,
                    "height": 60
                },
                "position": {
                    "x": 60,
                    "y": 90
                },
                "z": 1,
                "embeds": [],
                "dependson": [
                    "a7cfe40d-0958-4f46-8eb5-0dbe381860e6"
                ]
            },
            "a7cfe40d-0958-4f46-8eb5-0dbe381860e6": {
                "size": {
                    "width": 60,
                    "height": 60
                },
                "position": {
                    "x": -60,
                    "y": 90
                },
                "z": 1,
                "embeds": []
            },
            "234e003e-27a3-4a30-877f-3e725a18a303": {
                "size": {
                    "width": 60,
                    "height": 60
                },
                "position": {
                    "x": 300,
                    "y": 90
                },
                "z": 1,
                "embeds": []
            }
        }
    },
    "Parameters": {
        "InstanceType": {
            "Description": "Server EC2 instance type",
            "Type": "String",
            "Default": "t2.micro",
            "AllowedValues": [
                "t1.micro",
                "t2.micro",
                "t2.small",
                "t2.medium",
                "t3.micro",
                "t3.small",
                "t3.medium"
            ],
            "ConstraintDescription": "must be a valid EC2 instance type."
        },
        "KeyName": {
            "Description": "Name of an EC2 KeyPair to enable SSH access to the instance.",
            "Type": "AWS::EC2::KeyPair::KeyName",
            "ConstraintDescription": "must be the name of an existing EC2 KeyPair."
        },
        "AdminUserName": {
            "Description": "The admin account user name",
            "Default": "admin",
            "Type": "String",
            "MinLength": 1,
            "MaxLength": 16,
            "AllowedPattern": "[a-zA-Z][a-zA-Z0-9]*"
        },
        "AdminEmail": {
            "Default": "aiforgood@pm.me",
            "Description": "The admin account user email",
            "Type": "String",
            "AllowedPattern": "^[\\x20-\\x45]?[\\w-\\+]+(\\.[\\w]+)*@[\\w-]+(\\.[\\w]+)*(\\.[a-z]{2,})$"
        },
        "AdminPassword": {
            "Description": "The admin account password",
            "Type": "String",
            "NoEcho": true,
            "MinLength": 1,
            "MaxLength": 16,
            "AllowedPattern": "^[a-zA-Z0-9]*$"
        },
        "Debug": {
            "Default": "False",
            "AllowedValues": [
                "False",
                "True"
            ],
            "Description": "Debug mode or not",
            "Type": "String",
            "AllowedPattern": "^[a-zA-Z0-9]*$"
        },
        "SecretKey": {
            "Default": "zICc59rlKXmlFRpG",
            "Description": "Secret key for Django",
            "Type": "String",
            "AllowedPattern": "^[a-zA-Z0-9]*$"
        },
        "EMailUseTSL": {
            "Default": "False",
            "AllowedValues": [
                "False",
                "True"
            ],
            "Description": "SMTP will use TSL",
            "Type": "String",
            "AllowedPattern": "^[a-zA-Z0-9]*$"
        },
        "EMailHost": {
            "Default": "email-smtp.us-east-1.amazonaws.com",
            "Description": "SMTP Host",
            "Type": "String",
            "AllowedPattern": "^[\\w-]+(\\.[\\w-]+)*(\\.[a-z]{2,})$"
        },
        "EMailHostUser": {
            "Default": "caliban",
            "Description": "SMTP Host User",
            "Type": "String",
            "MinLength": 1,
            "MaxLength": 25,
            "AllowedPattern": "^[a-zA-Z0-9][a-zA-Z0-9]{1,25}$"
        },
        "EMailHostPassword": {
            "Description": "SMTP Host User password",
            "Type": "String",
            "NoEcho": true,
            "MinLength": 0,
            "MaxLength": 60,
            "AllowedPattern": "^\\p{Graph}+$"
        },
        "EMailHostPort": {
            "Default": "25",
            "Description": "SMTP Port",
            "Type": "String",
            "MinLength": 1,
            "MaxLength": 5,
            "AllowedPattern": "^\\d+$"
        },
        "WorkersCount": {
            "Description": "Workers Count",
            "Type": "String",
            "MinLength": 1,
            "MaxLength": 3,
            "AllowedPattern": "^\\d+$"
        },
        "FromEmail": {
            "Default": "ricjhill@protonmail.com",
            "Description": "The email used to send from sign up messages",
            "Type": "String",
            "AllowedPattern": "^[\\x20-\\x45]?[\\w-\\+]+(\\.[\\w]+)*@[\\w-]+(\\.[\\w]+)*(\\.[a-z]{2,})?$"
        },
        "DockerImageName": {
            "Default": "doccano/doccano:latest",
            "Description": "The Docker image name",
            "Type": "String",
            "AllowedPattern": "^[\\w_-]+/[\\w_-]+:[\\w_-]+$"
        },
        "OauthGithubKey": {
            "Description": "Sets the OAUTH_GITHUB_KEY which  is also the Client ID ",
            "Type": "String",
            "NoEcho": true,
            "MinLength": 0,
            "MaxLength": 60,
            "AllowedPattern": "^[a-zA-Z0-9]*$"
        },
        "OauthGithubSecret": {
            "Description": "Sets the OAUTH_GITHUB_SECRET which  is also the Client secret",
            "Type": "String",
            "NoEcho": true,
            "MinLength": 0,
            "MaxLength": 60,
            "AllowedPattern": "^[a-zA-Z0-9]*$"
        }
        
    },
    "Outputs": {
        "PublicDNS": {
            "Value": {
                "Fn::GetAtt": [
                    "App",
                    "PublicDnsName"
                ]
            },
            "Description": "Newly created server DNS address"
        }
    }
}